给定一个无序的整数数组，找到其中最长上升子序列的长度。
说明:
可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n2) 。

思路：
用dp[i] 表示 从下标0 到下标i 的最长上升子序列的长度，
对于任意的i 不为零的情况，应该在 i 的左侧找一个下标 j ，其满足两个条件：
1. nums[ j ]比 nums[ i ] 小
2. 它是所有满足条件1里 dp [j]  最大的那个
dp[i] = max(dp[j]) + 1 , j < i and nums[ j ] < nums[ i ]
如果不存在这样的下标j，说明在0 ~ i - 1 的范围内，所有元素都比nums[i] 大，即无法找到一个能和
nums[i] 组成上升子序列的元素，所以dp[i] = 1， 表示为nums[i] 自身成为一个长度为1 的上升子序列。
class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l = len(nums)
        if not l:
            return 0
        dp = [1 for _ in range(l)]
        
        for index, item in enumerate(nums):
            dp[index] = self.find(nums[:index + 1], dp) + 1
        # print dp       
        return max(dp)
            
    
    def find(self, nums, dp):
        max_element = -1 * 2 << 31
        
        for i in range(len(nums) - 2, -1, -1):
            if nums[i] < nums[-1]:
                max_element = max(max_element, dp[i]) 
 
        return max_element if max_element != -1 * 2 << 31 else 0
 
