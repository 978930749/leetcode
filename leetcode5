假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

请找出其中最小的元素。

你可以假设数组中不存在重复元素。

思路：二分查找最小值

class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: #处理0个元素
            return 0
        if len(nums) == 1: #处理1个元素
            return nums[0]
        if nums[0] < nums[-1]: #没发生旋转
            return nums[0]
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if mid + 1< len(nums): #mid 不是最后一位
                if nums[mid - 1] > nums[mid] and nums[mid] < nums[mid + 1]: #找到了
                    return nums[mid]
            else:
                if nums[mid - 1] > nums[mid]: # mid 是最后一位
                    return nums[mid]
                
            if nums[mid] < nums[-1]: 
                right = mid - 1
            else:
                left = mid + 1
