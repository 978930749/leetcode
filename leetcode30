实现一个 MapSum 类里的两个方法，insert 和 sum。
对于方法 insert，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。
对于方法 sum，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。

思路：
用字典树实现

class MapSum(object):
 
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = {}
 
    def insert(self, key, val):
        """
        :type key: str
        :type val: int
        :rtype: void
        """
        node = self.root
        for char in key:
            node = node.setdefault(char, {})
            
        node["end"] = val
        
 
    def sum(self, prefix):
        """
        :type prefix: str
        :rtype: int
        """
        
        node = self.root
        for char in prefix:
            node = node.setdefault(char, {})
        
        self.res = 0
        
        def dfs(node):
            # print node
            for key, val in node.items():
                if key == "end":
                    self.res += val
                else:
                    dfs(val)
        dfs(node)
            
        return self.res
